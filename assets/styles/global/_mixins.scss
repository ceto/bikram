    // FUNCTIONS
    @function grid-cols-to-px-width($col-count, $gutter-count: $col-count - 1) {
        $px-width: ($col-count * $layout-col-width) + ($gutter-count * $layout-gutter-width);

        @return $px-width;
    }

    // MIXINS

    // Grid-width
    // ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
    // FOR: Calculating percentage widths based on a column width, context, gutters
    // WHY: Let's you think in terms of grid column-count and context and not do the math
    // USE: @include grid-width(6);
    // NOTE: Uses layout variables as defaults, located in variables.scss.

    @mixin grid-width($col-count: 6, $context-col-count: $layout-col-count, $context-gutter-count: $context-col-count - 1, $gutter-count: $col-count - 1, $property: "width", $gallery-gutters: false) {
        $width: grid-cols-to-px-width($col-count, $gutter-count);
        $context-width: grid-cols-to-px-width($context-col-count, $context-gutter-count);
        $percentage-width: percentage($width / $context-width);

        #{$property}: $percentage-width;

        @if $gallery-gutters {
            $items-per-row: $context-col-count / $col-count;

            &:nth-of-type(n) {
                @include grid-width($col-count: 0, $gutter-count: 1, $context-col-count: $context-col-count, $property: "margin-right", $gallery-gutters: false);
            }

            &:nth-child(#{$items-per-row}n),
            &:last-child {
                margin-right: 0;
            }
        }
    }

    // https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/

    @mixin word-wrap {
        overflow-wrap: break-word;
        word-wrap: break-word;
        word-break: break-all;
        word-break: break-word;
        hyphens: auto;
    }

    @mixin niceul {
        margin-left:0;
        line-height: 1.4;
        margin: 1em 0 1.5em;
        padding:0;
        list-style: none;

        &:first-child() {
            margin-top:0;
        }

        > li {
            // text-indent: -1em;
            padding-left: 1.5em;
            &:before {
                content:'';
                display: inline-block;
                background-image: svg-load('scplus.svg', fill=$cl-tertiary);
                background-position: center left;
                background-repeat: no-repeat;
                background-size: contain;

                font-weight: $fw-bold;
                display: inline-block;
                width: .75em;
                height: 1.4em;
                float: left;
                margin-right:.75em;
                margin-left: -1.5em;
                color:$cl-tertiary;
                // transform: translateY(.125em);

                // transform-origin: left;

            }
        }

        li:not(:last-child) {
            margin-bottom: .5em;
        }
    }


    @mixin niceol {
        margin: 1.5rem 0;
        padding:0;
        list-style: none;
        line-height: 1.4;
        counter-reset: olcounter;

        > li {
            position: relative;
            counter-increment: olcounter;
            padding-left: 2.5em;
            text-indent: -2.5em;
            &:before {
                font-family: $fontserif;
                font-weight: $fw-bold;
                line-height: inherit;
                display: inline-block;
                width: 2.5em;
                transform: translateX(2.5em);
                color:$cl-tertiary;
                content: counter(olcounter) ".";
            }
        }

        li:not(:last-child) {
            margin-bottom: .75rem;
        }

    }
